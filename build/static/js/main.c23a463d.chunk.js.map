{"version":3,"sources":["serviceWorker.ts","app/Calendar/Date/Date.presenter.tsx","app/Calendar/Date/Date.container.tsx","app/Calendar/Week/Week.presenter.tsx","mocks/week.ts","services/week.ts","app/Calendar/Week/Week.container.tsx","app/Calendar/Header/Label/Label.presenter.tsx","app/Calendar/UserAva/UserAva.presenter.tsx","app/Calendar/UserAva/UserAva.container.tsx","app/Calendar/Header/Label/Label.container.tsx","app/Calendar/Header/Header.presenter.tsx","app/Calendar/Header/Header.container.tsx","app/Calendar/TimeGrid/TimeCell/TimeCell.presenter.tsx","app/Calendar/TimeGrid/TimeCell/TimeCell.container.tsx","app/Calendar/TimeGrid/TimeGroup/TimeGroup.presenter.tsx","mocks/time.ts","services/time.ts","app/Calendar/TimeGrid/TimeGroup/TimeGroup.container.tsx","app/Calendar/TimeGrid/TimeEachDate/TimeEachDate.presenter.tsx","app/Calendar/TimeGrid/TimeEachDate/TimeEachDate.container.tsx","app/Calendar/TimeGrid/TimeGrid.presenter.tsx","app/Calendar/TimeGrid/TimeGrid.container.tsx","app/Calendar/Calendar.presenter.tsx","app/Calendar/Calendar.container.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","DatePresenter","props","dateSplited","data","split","number","text","className","DateContainer","this","Component","WeekPresenter","map","w","i","key","week","WeekService","getWeek","WeekContainer","LabelPresenter","item","UserAvaPresenter","src","alt","UserAvaContainer","LabelContainer","HeaderPresenter","HeaderContainer","React","TimeCellPresenter","options","showContent","TimeCellContainer","TimeGroupPresenter","t","timeCellClassName","clsx","times","TimeService","getTimes","TimeGroupContainer","TimeEachDatePresenter","TimeEachDateContainer","TimeGridPresenter","TimeGridContainer","CalendarPresenter","CalendarContainer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCdOC,G,wBAA0D,SACrEC,GACI,IAEEC,EADWD,EAATE,KACiBC,MAAM,OACzBC,EAASH,EAAY,GACrBI,EAAOJ,EAAY,GACzB,OACE,yBAAKK,UAAU,QACb,0BAAMA,UAAU,eAAeF,GAC/B,0BAAME,UAAU,aAAaD,MCAtBE,EAAb,uKAKI,OAAO,kBAAC,EAAD,CAAeL,KAAMM,KAAKR,MAAME,WAL3C,GAAmCO,aCVtBC,EAAyD,SACpEV,GAEA,OACE,yBAAKM,UAAU,QACZN,EAAME,KAAKS,KAAI,SAACC,EAAGC,GAClB,OAAO,kBAAC,EAAD,CAAeC,IAAKD,EAAGX,KAAMU,SCV/BG,EAAO,CAClB,YACA,aACA,eACA,cACA,YACA,cACA,aCLWC,EAAc,CACzBC,QAGF,WACE,MAAO,CACLf,KAAMa,KCMH,IAAMG,EAAb,4MAIEH,KAAOC,EAAYC,UAJrB,uDAMI,OAAO,kBAAC,EAAD,CAAef,KAAMM,KAAKO,KAAKb,WAN1C,GAAmCO,aCVtBU,G,MAA2D,SACtEnB,GAEA,OAAO,yBAAKM,UAAU,gBAAgBN,EAAMoB,QCJjCC,G,MAA+D,SAC1ErB,GAEA,OACE,yBAAKM,UAAU,YACb,yBAAKgB,IAAKtB,EAAME,KAAMqB,IAAK,gBCCpBC,EAAb,uKAKI,OACE,kBAAC,EAAD,CACEtB,KACE,iGARV,GAAsCO,aCGzBgB,EAAb,uKAKI,OAAO,kBAAC,EAAD,CAAgBL,KAAM,kBAAC,EAAD,YALjC,GAAoCX,aCPvBiB,EAA4B,SAAC1B,GACxC,OACE,yBAAKM,UAAU,UACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCNOqB,EAAb,uKAEI,OAAO,kBAAC,EAAD,UAFX,GAAqCC,IAAMnB,WCC9BoB,G,kBAAiE,SAC5E7B,GAEA,OACE,yBAAKM,UAAS,oBAAeN,EAAMM,UAAYN,EAAMM,UAAY,KAC9DN,EAAM8B,QAAQC,aAAe/B,EAAME,QCM7B8B,EAAb,uKAKI,OACE,kBAAC,EAAD,CACE9B,KAAMM,KAAKR,MAAME,KACjB4B,QAAS,CAAEC,YAAavB,KAAKR,MAAM8B,QAAQC,aAC3CzB,UAAWE,KAAKR,MAAMM,gBAT9B,GAAuCG,a,OCV1BwB,EAAmE,SAC9EjC,GAEA,OACE,yBAAKM,UAAU,cACZN,EAAME,KAAKS,KAAI,SAACuB,EAAGrB,GAClB,IAAMsB,EAAoBC,YAAK,CAC7B,eAAe,EACf,0BAA0B,IAE5B,OACE,kBAAC,EAAD,CACEtB,IAAKD,EACLX,KAAMgC,EACNJ,QAAS,CAAEC,YAAalB,EAAI,IAAM,GAClCP,UAAW6B,SCpBVE,EAAQ,CACnB,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SC/CWC,EAAc,CACzBC,SAGF,WACE,MAAO,CACLrC,KAAMmC,KCGH,IAAMG,EAAb,4MAIEH,MAAQC,EAAYC,WAJtB,uDAMI,OAAO,kBAAC,EAAD,CAAoBrC,KAAMM,KAAK6B,MAAMnC,WANhD,GAAwCO,aCN3BgC,G,MAAyE,SACpFzC,GAEA,OACE,yBAAKM,UAAU,kBACZN,EAAME,KAAKS,KAAI,SAACuB,EAAGrB,GAClB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLX,KAAMgC,EACNJ,QAAS,CAAEC,aAAa,WCLvBW,EAAb,4MAIEL,MAAQC,EAAYC,WAJtB,uDAMI,OAAO,kBAAC,EAAD,CAAuBrC,KAAMM,KAAK6B,MAAMnC,WANnD,GAA2CO,aCJ9BkC,EAAiE,SAC5E3C,GAEA,OACE,yBAAKM,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCXOsC,EAAb,uKAKI,OAAO,kBAAC,EAAD,UALX,GAAuCnC,aCF1BoC,EAA8B,SAAC7C,GAC1C,OACE,yBAAKM,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCNOwC,EAAb,uKAEI,OAAO,kBAAC,EAAD,UAFX,GAAuClB,IAAMnB,W,MCG7CsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SzB8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c23a463d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport \"./Date.style.scss\";\nimport { DateContainerModule } from \"./Date.container\";\n\nexport const DatePresenter: React.FC<DateContainerModule.Prensenter> = (\n  props\n) => {\n  const { data } = props;\n  const dateSplited = data.split(/\\s/g);\n  const number = dateSplited[0];\n  const text = dateSplited[1];\n  return (\n    <div className=\"date\">\n      <span className=\"date-number\">{number}</span>\n      <span className=\"date-text\">{text}</span>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { DatePresenter } from \"./Date.presenter\";\n\nexport declare module DateContainerModule {\n  export type Props = {\n    data: string & React.ReactNode;\n  };\n  export type State = {};\n\n  export type Prensenter = {\n    data: string & React.ReactNode;\n  };\n}\n\nexport class DateContainer extends Component<\n  DateContainerModule.Props,\n  DateContainerModule.State\n> {\n  render() {\n    return <DatePresenter data={this.props.data} />;\n  }\n}\n","import React from \"react\";\nimport \"./Week.style.scss\";\nimport { WeekContainerModule } from \"./Week.container\";\nimport { DateContainer } from \"../Date/Date.container\";\nexport const WeekPresenter: React.FC<WeekContainerModule.Presenter> = (\n  props\n) => {\n  return (\n    <div className=\"week\">\n      {props.data.map((w, i) => {\n        return <DateContainer key={i} data={w} />;\n      })}\n    </div>\n  );\n};\n","export const week = [\n  \"23 Monday\",\n  \"24 Tuesday\",\n  \"25 Wednesday\",\n  \"26 Thursday\",\n  \"27 Friday\",\n  \"28 Saturday\",\n  \"29 Sunday\",\n];\n","import { week } from \"../mocks/week\";\n\nexport const WeekService = {\n  getWeek,\n};\n\nfunction getWeek() {\n  return {\n    data: week,\n  };\n}\n","import React, { Component } from \"react\";\nimport { WeekPresenter } from \"./Week.presenter\";\nimport { WeekService } from \"../../../services/week\";\n\nexport declare module WeekContainerModule {\n  export type Props = {};\n\n  export type State = {};\n\n  export type Presenter = {\n    data: string[];\n  };\n}\n\nexport class WeekContainer extends Component<\n  WeekContainerModule.State,\n  WeekContainerModule.Props\n> {\n  week = WeekService.getWeek();\n  render() {\n    return <WeekPresenter data={this.week.data} />;\n  }\n}\n","import React from \"react\";\nimport \"./Label.style.scss\";\nimport { LabelContainerModule } from \"./Label.container\";\n\nexport const LabelPresenter: React.FC<LabelContainerModule.Presenter> = (\n  props\n) => {\n  return <div className=\"header-label\">{props.item}</div>;\n};\n","import React from \"react\";\nimport \"./UserAva.style.scss\";\nimport { UserAvaContainerModule } from \"./UserAva.container\";\nexport const UserAvaPresenter: React.FC<UserAvaContainerModule.Presenter> = (\n  props\n) => {\n  return (\n    <div className=\"user-ava\">\n      <img src={props.data} alt={\"user-img\"} />\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { UserAvaPresenter } from \"./UserAva.presenter\";\nexport declare module UserAvaContainerModule {\n  export type Props = {};\n  export type State = {};\n  export type Presenter = {\n    data: string & React.ReactNode;\n  };\n}\nexport class UserAvaContainer extends Component<\n  UserAvaContainerModule.Props,\n  UserAvaContainerModule.State\n> {\n  render() {\n    return (\n      <UserAvaPresenter\n        data={\n          \"https://www.iconninja.com/files/445/434/573/man-user-person-male-profile-avatar-icon.png\"\n        }\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { LabelPresenter } from \"./Label.presenter\";\nimport { UserAvaContainer } from \"../../UserAva/UserAva.container\";\n\nexport declare module LabelContainerModule {\n  export type Props = {};\n  export type State = {};\n  export type Presenter = {\n    item: string | React.ReactNode;\n  };\n}\n\nexport class LabelContainer extends Component<\n  LabelContainerModule.Props,\n  LabelContainerModule.State\n> {\n  render() {\n    return <LabelPresenter item={<UserAvaContainer />} />;\n  }\n}\n","import React from \"react\";\nimport \"./Header.style.scss\";\nimport { WeekContainer } from \"../Week/Week.container\";\nimport { LabelContainer } from \"./Label/Label.container\";\n\nexport const HeaderPresenter: React.FC = (props) => {\n  return (\n    <div className=\"header\">\n      <LabelContainer />\n      <WeekContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { HeaderPresenter } from \"./Header.presenter\";\n\nexport class HeaderContainer extends React.Component {\n  render() {\n    return <HeaderPresenter />;\n  }\n}\n","import React from \"react\";\nimport \"./TimeCell.style.scss\";\nimport { TimeCellContainerModule } from \"./TimeCell.container\";\n\nexport const TimeCellPresenter: React.FC<TimeCellContainerModule.Presenter> = (\n  props\n) => {\n  return (\n    <div className={`time-cell ${props.className ? props.className : \"\"}`}>\n      {props.options.showContent && props.data}\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { TimeCellPresenter } from \"./TimeCell.presenter\";\nexport declare module TimeCellContainerModule {\n  export type Props = {\n    data: string;\n    options: { showContent: boolean };\n    className?: string;\n  };\n  export type State = {};\n  export type Presenter = {\n    data: string;\n    options: { showContent: boolean };\n    className?: string;\n  };\n}\nexport class TimeCellContainer extends Component<\n  TimeCellContainerModule.Props,\n  TimeCellContainerModule.State\n> {\n  render() {\n    return (\n      <TimeCellPresenter\n        data={this.props.data}\n        options={{ showContent: this.props.options.showContent }}\n        className={this.props.className}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport \"./TimeGroup.style.scss\";\nimport { TimeGroupContainerModule } from \"./TimeGroup.container\";\nimport { TimeCellContainer } from \"../TimeCell/TimeCell.container\";\nimport clsx from \"clsx\";\nexport const TimeGroupPresenter: React.FC<TimeGroupContainerModule.Presenter> = (\n  props\n) => {\n  return (\n    <div className=\"time-group\">\n      {props.data.map((t, i) => {\n        const timeCellClassName = clsx({\n          \"border-none\": true,\n          \"background-transparent\": true,\n        });\n        return (\n          <TimeCellContainer\n            key={i}\n            data={t}\n            options={{ showContent: i % 2 === 0 }}\n            className={timeCellClassName}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","export const times = [\n  \"00:00\",\n  \"00:30\",\n  \"01:00\",\n  \"01:30\",\n  \"02:00\",\n  \"02:30\",\n  \"03:00\",\n  \"03:30\",\n  \"04:00\",\n  \"04:30\",\n  \"05:00\",\n  \"05:30\",\n  \"06:00\",\n  \"06:30\",\n  \"07:00\",\n  \"07:30\",\n  \"08:00\",\n  \"08:30\",\n  \"09:00\",\n  \"09:30\",\n  \"10:00\",\n  \"10:30\",\n  \"11:00\",\n  \"11:30\",\n  \"12:00\",\n  \"12:30\",\n  \"13:00\",\n  \"13:30\",\n  \"14:00\",\n  \"14:30\",\n  \"15:00\",\n  \"15:30\",\n  \"16:00\",\n  \"16:30\",\n  \"17:00\",\n  \"17:30\",\n  \"18:00\",\n  \"18:30\",\n  \"19:00\",\n  \"19:30\",\n  \"20:00\",\n  \"20:30\",\n  \"21:00\",\n  \"21:30\",\n  \"22:00\",\n  \"22:30\",\n  \"23:00\",\n  \"23:30\",\n  \"24:00\",\n];\n","import { times } from \"../mocks/time\";\n\nexport const TimeService = {\n  getTimes,\n};\n\nfunction getTimes() {\n  return {\n    data: times,\n  };\n}\n","import React, { Component } from \"react\";\nimport { TimeGroupPresenter } from \"./TimeGroup.presenter\";\nimport { TimeService } from \"../../../../services/time\";\n\nexport declare module TimeGroupContainerModule {\n  export type Props = {};\n  export type State = {};\n  export type Presenter = {\n    data: string[];\n  };\n}\nexport class TimeGroupContainer extends Component<\n  TimeGroupContainerModule.Props,\n  TimeGroupContainerModule.State\n> {\n  times = TimeService.getTimes();\n  render() {\n    return <TimeGroupPresenter data={this.times.data} />;\n  }\n}\n","import React from \"react\";\nimport \"./TimeEachDate.style.scss\";\nimport { TimeEachDateContainerModule } from \"./TimeEachDate.container\";\nimport { TimeCellContainer } from \"../TimeCell/TimeCell.container\";\n\nexport const TimeEachDatePresenter: React.FC<TimeEachDateContainerModule.Presenter> = (\n  props\n) => {\n  return (\n    <div className=\"time-each-date\">\n      {props.data.map((t, i) => {\n        return (\n          <TimeCellContainer\n            key={i}\n            data={t}\n            options={{ showContent: false }}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { TimeEachDatePresenter } from \"./TimeEachDate.presenter\";\nimport { TimeService } from \"../../../../services/time\";\nexport declare module TimeEachDateContainerModule {\n  export type Props = {};\n  export type State = {};\n  export type Presenter = {\n    data: string[];\n  };\n}\nexport class TimeEachDateContainer extends Component<\n  TimeEachDateContainerModule.Props,\n  TimeEachDateContainerModule.State\n> {\n  times = TimeService.getTimes();\n  render() {\n    return <TimeEachDatePresenter data={this.times.data} />;\n  }\n}\n","import React from \"react\";\nimport \"./TimeGrid.style.scss\";\nimport { TimeGridContainerModule } from \"./TimeGrid.container\";\nimport { TimeGroupContainer } from \"./TimeGroup/TimeGroup.container\";\nimport { TimeEachDateContainer } from \"./TimeEachDate/TimeEachDate.container\";\n\nexport const TimeGridPresenter: React.FC<TimeGridContainerModule.Presenter> = (\n  props\n) => {\n  return (\n    <div className=\"time-grid\">\n      <TimeGroupContainer />\n      <TimeEachDateContainer />\n      <TimeEachDateContainer />\n      <TimeEachDateContainer />\n      <TimeEachDateContainer />\n      <TimeEachDateContainer />\n      <TimeEachDateContainer />\n      <TimeEachDateContainer />\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport { TimeGridPresenter } from \"./TimeGrid.presenter\";\nexport declare module TimeGridContainerModule {\n  export type Props = {};\n  export type State = {};\n  export type Presenter = {};\n}\nexport class TimeGridContainer extends Component<\n  TimeGridContainerModule.Props,\n  TimeGridContainerModule.State\n> {\n  render() {\n    return <TimeGridPresenter />;\n  }\n}\n","import React from \"react\";\nimport \"./Calendar.style.scss\";\nimport { HeaderContainer } from \"./Header/Header.container\";\nimport { TimeGridContainer } from \"./TimeGrid/TimeGrid.container\";\n\nexport const CalendarPresenter: React.FC = (props) => {\n  return (\n    <div className=\"calendar\">\n      <HeaderContainer />\n      <TimeGridContainer />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { CalendarPresenter } from \"./Calendar.presenter\";\n\nexport class CalendarContainer extends React.Component {\n  render() {\n    return <CalendarPresenter />;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CalendarContainer } from \"./app/Calendar/Calendar.container\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CalendarContainer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}